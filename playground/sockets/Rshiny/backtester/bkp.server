suppressPackageStartupMessages(library("zoo"))
library("DBI")
library("Defaults")
library("xts")
library("TTR")
library("RSQLite")

source('../../clientInterface.R')
source('./bt_analyser.R')

if (!require(PerformanceAnalytics)) {
    stop("This app requires the PerformanceAnalytics package. To install it, run 'install.packages(\"PerformanceAnalytics\")'.\n")
}

if (!require(quantmod)) {
    stop("This app requires the quantmod package. To install it, run 'install.packages(\"quantmod\")'.\n")
}

# Download data for a stock, if needed

library(shiny)

# Define server logic required to summarize and view the selected dataset
shinyServer(function(input, output) 
{
    make_chart <- function(strategie="test") {
        database <- '../../../../Database/stocks.db'
        target <- strategie

        drv <- dbDriver("SQLite")
        connection <- dbConnect(drv, database)
        ## Checking the connection
        dbListTables(connection)
        if ( dbExistsTable(connection, target) ) {
            dbListFields(connection, target)

            ## Storing it in a dataframe and converting to xts object
            data <- dbReadTable(connection, target)
            ## Assuming dates are stored in last column, see python db
            datesIdx <- length(data)
            ## Old version: xtsData <- as.xts(data[,-datesIdx], order.by=as.POSIXct(data[,datesIdx], origin="1970-01-01"))
            xtsData <- xts(data[,-datesIdx], order.by=as.Date(data[,datesIdx]))
        } else {
            msg <- paste('** Error: No table named ', target)
            stop(msg)
        }

        ## ===========================     Analysis     ============================= ##
        charts.PerformanceSummary(xtsData[,c("algo_rets", "bench_rets")], main="Performance of the strategy")
        #chart.Boxplot(xtsData[,c("algo_rets", "bench_rets")])

        #layout(rbind(c(1,2), c(3,4)))
        #chart.Histogram(xtsData[, "algo_rets"], main="Plain", methods = NULL)
        #chart.Histogram(xtsData[, "algo_rets"], main="Density", breaks=40, methods = c("add.density", "add.normal"))
        #chart.Histogram(xtsData[, "algo_rets"], main="Skew and Kurt", methods = c("add.centered", "add.rug"))
        #chart.Histogram(xtsData[, "algo_rets"], main="RiskMeasures", methods = c("add.risk"))

        ## ============================    Cleaning    ============================= ##
        dbDisconnect(connection)
        dbUnloadDriver(drv)
    }

    make_table <- function(symbol="SP500") {
    }

    remoteExecute  <- function(cmd, host='localhost', port=2000)
    {
        #FIXME First run quit annying
        cmds = unlist(strsplit(cmd, ' '))
        socket  <- make.socket(host, port)
        on.exit(close.socket(socket))
        output  <- read.socket(socket)
        answer <- remoteCmd(socket, 'state', print=FALSE)
        answer <- remoteJsonCmd(socket, 'user', cmd, print=FALSE)
        close.socket(socket)
    }

    # Generate a plot of the system and buy/hold benchmark given nmonths parameter
    # include outliers if requested
    output$systemPlot <- reactivePlot(function() 
    {
        make_chart('test')
    })

    # Generate a summary stats table of the dataset
    output$view <- reactiveTable(function() 
    {
        make_table()
    })

    output$command <- reactiveText(function() 
    {
        remoteExecute(input$command, port=1234)
        input$command
    })
})
